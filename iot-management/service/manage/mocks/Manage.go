// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	iot_identityweb "github.com/everactive/dmscore/iot-identity/web"
	domain "github.com/everactive/dmscore/iot-management/domain"

	messages "github.com/everactive/dmscore/iot-devicetwin/pkg/messages"

	mock "github.com/stretchr/testify/mock"

	openid "github.com/juju/usso/openid"

	web "github.com/everactive/dmscore/iot-devicetwin/web"
)

// Manage is an autogenerated mock type for the Manage type
type Manage struct {
	mock.Mock
}

// ActionList provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) ActionList(orgID string, username string, role int, deviceID string) web.ActionsResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 web.ActionsResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.ActionsResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(web.ActionsResponse)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Manage) CreateUser(user domain.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceDelete provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) DeviceDelete(orgID string, username string, role int, deviceID string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// DeviceGet provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) DeviceGet(orgID string, username string, role int, deviceID string) web.DeviceResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 web.DeviceResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.DeviceResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(web.DeviceResponse)
	}

	return r0
}

// DeviceList provides a mock function with given fields: orgID, username, role
func (_m *Manage) DeviceList(orgID string, username string, role int) web.DevicesResponse {
	ret := _m.Called(orgID, username, role)

	var r0 web.DevicesResponse
	if rf, ok := ret.Get(0).(func(string, string, int) web.DevicesResponse); ok {
		r0 = rf(orgID, username, role)
	} else {
		r0 = ret.Get(0).(web.DevicesResponse)
	}

	return r0
}

// DeviceLogs provides a mock function with given fields: orgID, username, role, deviceID, logs
func (_m *Manage) DeviceLogs(orgID string, username string, role int, deviceID string, logs *messages.DeviceLogs) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, logs)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, *messages.DeviceLogs) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, logs)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// DeviceUsersAction provides a mock function with given fields: orgID, username, role, deviceID, deviceUser
func (_m *Manage) DeviceUsersAction(orgID string, username string, role int, deviceID string, deviceUser messages.DeviceUser) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, deviceUser)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, messages.DeviceUser) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, deviceUser)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// GetUser provides a mock function with given fields: username
func (_m *Manage) GetUser(username string) (domain.User, error) {
	ret := _m.Called(username)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupCreate provides a mock function with given fields: orgID, username, role, body
func (_m *Manage) GroupCreate(orgID string, username string, role int, body []byte) web.StandardResponse {
	ret := _m.Called(orgID, username, role, body)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, []byte) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, body)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// GroupDeviceLink provides a mock function with given fields: orgID, username, role, name, deviceID
func (_m *Manage) GroupDeviceLink(orgID string, username string, role int, name string, deviceID string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, name, deviceID)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, name, deviceID)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// GroupDeviceUnlink provides a mock function with given fields: orgID, username, role, name, deviceID
func (_m *Manage) GroupDeviceUnlink(orgID string, username string, role int, name string, deviceID string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, name, deviceID)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, name, deviceID)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// GroupDevices provides a mock function with given fields: orgID, username, role, name
func (_m *Manage) GroupDevices(orgID string, username string, role int, name string) web.DevicesResponse {
	ret := _m.Called(orgID, username, role, name)

	var r0 web.DevicesResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.DevicesResponse); ok {
		r0 = rf(orgID, username, role, name)
	} else {
		r0 = ret.Get(0).(web.DevicesResponse)
	}

	return r0
}

// GroupExcludedDevices provides a mock function with given fields: orgID, username, role, name
func (_m *Manage) GroupExcludedDevices(orgID string, username string, role int, name string) web.DevicesResponse {
	ret := _m.Called(orgID, username, role, name)

	var r0 web.DevicesResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.DevicesResponse); ok {
		r0 = rf(orgID, username, role, name)
	} else {
		r0 = ret.Get(0).(web.DevicesResponse)
	}

	return r0
}

// GroupList provides a mock function with given fields: orgID, username, role
func (_m *Manage) GroupList(orgID string, username string, role int) web.GroupsResponse {
	ret := _m.Called(orgID, username, role)

	var r0 web.GroupsResponse
	if rf, ok := ret.Get(0).(func(string, string, int) web.GroupsResponse); ok {
		r0 = rf(orgID, username, role)
	} else {
		r0 = ret.Get(0).(web.GroupsResponse)
	}

	return r0
}

// OpenIDNonceStore provides a mock function with given fields:
func (_m *Manage) OpenIDNonceStore() openid.NonceStore {
	ret := _m.Called()

	var r0 openid.NonceStore
	if rf, ok := ret.Get(0).(func() openid.NonceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(openid.NonceStore)
		}
	}

	return r0
}

// OrganizationCreate provides a mock function with given fields: org
func (_m *Manage) OrganizationCreate(org domain.OrganizationCreate) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.OrganizationCreate) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationForUserToggle provides a mock function with given fields: orgID, username
func (_m *Manage) OrganizationForUserToggle(orgID string, username string) error {
	ret := _m.Called(orgID, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationGet provides a mock function with given fields: orgID
func (_m *Manage) OrganizationGet(orgID string) (domain.Organization, error) {
	ret := _m.Called(orgID)

	var r0 domain.Organization
	if rf, ok := ret.Get(0).(func(string) domain.Organization); ok {
		r0 = rf(orgID)
	} else {
		r0 = ret.Get(0).(domain.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationUpdate provides a mock function with given fields: org
func (_m *Manage) OrganizationUpdate(org domain.Organization) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Organization) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationsForUser provides a mock function with given fields: username
func (_m *Manage) OrganizationsForUser(username string) ([]domain.Organization, error) {
	ret := _m.Called(username)

	var r0 []domain.Organization
	if rf, ok := ret.Get(0).(func(string) []domain.Organization); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegDeviceGet provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) RegDeviceGet(orgID string, username string, role int, deviceID string) iot_identityweb.EnrollResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 iot_identityweb.EnrollResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) iot_identityweb.EnrollResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(iot_identityweb.EnrollResponse)
	}

	return r0
}

// RegDeviceList provides a mock function with given fields: orgID, username, role
func (_m *Manage) RegDeviceList(orgID string, username string, role int) iot_identityweb.DevicesResponse {
	ret := _m.Called(orgID, username, role)

	var r0 iot_identityweb.DevicesResponse
	if rf, ok := ret.Get(0).(func(string, string, int) iot_identityweb.DevicesResponse); ok {
		r0 = rf(orgID, username, role)
	} else {
		r0 = ret.Get(0).(iot_identityweb.DevicesResponse)
	}

	return r0
}

// RegDeviceUpdate provides a mock function with given fields: orgID, username, role, deviceID, body
func (_m *Manage) RegDeviceUpdate(orgID string, username string, role int, deviceID string, body []byte) iot_identityweb.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, body)

	var r0 iot_identityweb.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, []byte) iot_identityweb.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, body)
	} else {
		r0 = ret.Get(0).(iot_identityweb.StandardResponse)
	}

	return r0
}

// RegisterDevice provides a mock function with given fields: orgID, username, role, body
func (_m *Manage) RegisterDevice(orgID string, username string, role int, body []byte) iot_identityweb.RegisterResponse {
	ret := _m.Called(orgID, username, role, body)

	var r0 iot_identityweb.RegisterResponse
	if rf, ok := ret.Get(0).(func(string, string, int, []byte) iot_identityweb.RegisterResponse); ok {
		r0 = rf(orgID, username, role, body)
	} else {
		r0 = ret.Get(0).(iot_identityweb.RegisterResponse)
	}

	return r0
}

// SnapConfigSet provides a mock function with given fields: orgID, username, role, deviceID, snap, config
func (_m *Manage) SnapConfigSet(orgID string, username string, role int, deviceID string, snap string, config []byte) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap, config)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, []byte) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap, config)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapInstall provides a mock function with given fields: orgID, username, role, deviceID, snap
func (_m *Manage) SnapInstall(orgID string, username string, role int, deviceID string, snap string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapList provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) SnapList(orgID string, username string, role int, deviceID string) web.SnapsResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 web.SnapsResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.SnapsResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(web.SnapsResponse)
	}

	return r0
}

// SnapListOnDevice provides a mock function with given fields: orgID, username, role, deviceID
func (_m *Manage) SnapListOnDevice(orgID string, username string, role int, deviceID string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapRemove provides a mock function with given fields: orgID, username, role, deviceID, snap
func (_m *Manage) SnapRemove(orgID string, username string, role int, deviceID string, snap string) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapServiceAction provides a mock function with given fields: orgID, username, role, deviceID, snap, action, body
func (_m *Manage) SnapServiceAction(orgID string, username string, role int, deviceID string, snap string, action string, body []byte) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap, action, body)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string, []byte) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap, action, body)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapSnapshot provides a mock function with given fields: orgID, username, role, deviceID, snap, body
func (_m *Manage) SnapSnapshot(orgID string, username string, role int, deviceID string, snap string, body []byte) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap, body)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, []byte) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap, body)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// SnapUpdate provides a mock function with given fields: orgID, username, role, deviceID, snap, action, body
func (_m *Manage) SnapUpdate(orgID string, username string, role int, deviceID string, snap string, action string, body []byte) web.StandardResponse {
	ret := _m.Called(orgID, username, role, deviceID, snap, action, body)

	var r0 web.StandardResponse
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string, []byte) web.StandardResponse); ok {
		r0 = rf(orgID, username, role, deviceID, snap, action, body)
	} else {
		r0 = ret.Get(0).(web.StandardResponse)
	}

	return r0
}

// UserDelete provides a mock function with given fields: username
func (_m *Manage) UserDelete(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields:
func (_m *Manage) UserList() ([]domain.User, error) {
	ret := _m.Called()

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: user
func (_m *Manage) UserUpdate(user domain.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewManage interface {
	mock.TestingT
	Cleanup(func())
}

// NewManage creates a new instance of Manage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManage(t mockConstructorTestingTNewManage) *Manage {
	mock := &Manage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
