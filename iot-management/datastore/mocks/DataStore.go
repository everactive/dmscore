// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	datastore "github.com/everactive/dmscore/iot-management/datastore"
	mock "github.com/stretchr/testify/mock"

	models "github.com/everactive/dmscore/iot-management/datastore/models"

	openid "github.com/juju/usso/openid"
)

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *DataStore) CreateUser(user datastore.User) (int64, error) {
	ret := _m.Called(user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(datastore.User) int64); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettings provides a mock function with given fields:
func (_m *DataStore) GetSettings() ([]models.Setting, error) {
	ret := _m.Called()

	var r0 []models.Setting
	if rf, ok := ret.Get(0).(func() []models.Setting); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Setting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: username
func (_m *DataStore) GetUser(username string) (datastore.User, error) {
	ret := _m.Called(username)

	var r0 datastore.User
	if rf, ok := ret.Get(0).(func(string) datastore.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(datastore.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenIDNonceStore provides a mock function with given fields:
func (_m *DataStore) OpenIDNonceStore() openid.NonceStore {
	ret := _m.Called()

	var r0 openid.NonceStore
	if rf, ok := ret.Get(0).(func() openid.NonceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(openid.NonceStore)
		}
	}

	return r0
}

// OrgUserAccess provides a mock function with given fields: orgID, username, role
func (_m *DataStore) OrgUserAccess(orgID string, username string, role int) bool {
	ret := _m.Called(orgID, username, role)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(orgID, username, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OrganizationCreate provides a mock function with given fields: org
func (_m *DataStore) OrganizationCreate(org datastore.Organization) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Organization) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationForUserToggle provides a mock function with given fields: orgID, username
func (_m *DataStore) OrganizationForUserToggle(orgID string, username string) error {
	ret := _m.Called(orgID, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationGet provides a mock function with given fields: orgIDOrName
func (_m *DataStore) OrganizationGet(orgIDOrName string) (datastore.Organization, error) {
	ret := _m.Called(orgIDOrName)

	var r0 datastore.Organization
	if rf, ok := ret.Get(0).(func(string) datastore.Organization); ok {
		r0 = rf(orgIDOrName)
	} else {
		r0 = ret.Get(0).(datastore.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgIDOrName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationUpdate provides a mock function with given fields: org
func (_m *DataStore) OrganizationUpdate(org datastore.Organization) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Organization) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrganizationsForUser provides a mock function with given fields: username
func (_m *DataStore) OrganizationsForUser(username string) ([]datastore.Organization, error) {
	ret := _m.Called(username)

	var r0 []datastore.Organization
	if rf, ok := ret.Get(0).(func(string) []datastore.Organization); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *DataStore) Set(key string, value string) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserDelete provides a mock function with given fields: username
func (_m *DataStore) UserDelete(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields:
func (_m *DataStore) UserList() ([]datastore.User, error) {
	ret := _m.Called()

	var r0 []datastore.User
	if rf, ok := ret.Get(0).(func() []datastore.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: user
func (_m *DataStore) UserUpdate(user datastore.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDataStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataStore creates a new instance of DataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataStore(t mockConstructorTestingTNewDataStore) *DataStore {
	mock := &DataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
