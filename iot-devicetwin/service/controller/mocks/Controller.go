// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/everactive/dmscore/iot-devicetwin/domain"
	messages "github.com/everactive/dmscore/iot-devicetwin/pkg/messages"

	mock "github.com/stretchr/testify/mock"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// ActionHandler provides a mock function with given fields: client, msg
func (_m *Controller) ActionHandler(client mqtt.Client, msg mqtt.Message) {
	_m.Called(client, msg)
}

// ActionList provides a mock function with given fields: orgID, clientID
func (_m *Controller) ActionList(orgID string, clientID string) ([]domain.Action, error) {
	ret := _m.Called(orgID, clientID)

	var r0 []domain.Action
	if rf, ok := ret.Get(0).(func(string, string) []domain.Action); ok {
		r0 = rf(orgID, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceDelete provides a mock function with given fields: deviceID
func (_m *Controller) DeviceDelete(deviceID string) error {
	ret := _m.Called(deviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceGet provides a mock function with given fields: orgID, clientID
func (_m *Controller) DeviceGet(orgID string, clientID string) (messages.Device, error) {
	ret := _m.Called(orgID, clientID)

	var r0 messages.Device
	if rf, ok := ret.Get(0).(func(string, string) messages.Device); ok {
		r0 = rf(orgID, clientID)
	} else {
		r0 = ret.Get(0).(messages.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceList provides a mock function with given fields: orgID
func (_m *Controller) DeviceList(orgID string) ([]messages.Device, error) {
	ret := _m.Called(orgID)

	var r0 []messages.Device
	if rf, ok := ret.Get(0).(func(string) []messages.Device); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceLogs provides a mock function with given fields: orgID, clientID, logData
func (_m *Controller) DeviceLogs(orgID string, clientID string, logData *messages.DeviceLogs) error {
	ret := _m.Called(orgID, clientID, logData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *messages.DeviceLogs) error); ok {
		r0 = rf(orgID, clientID, logData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapConf provides a mock function with given fields: orgID, clientID, snap, settings
func (_m *Controller) DeviceSnapConf(orgID string, clientID string, snap string, settings string) error {
	ret := _m.Called(orgID, clientID, snap, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(orgID, clientID, snap, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapInstall provides a mock function with given fields: orgID, clientID, snap
func (_m *Controller) DeviceSnapInstall(orgID string, clientID string, snap string) error {
	ret := _m.Called(orgID, clientID, snap)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgID, clientID, snap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapList provides a mock function with given fields: orgID, clientID
func (_m *Controller) DeviceSnapList(orgID string, clientID string) error {
	ret := _m.Called(orgID, clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgID, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapRemove provides a mock function with given fields: orgID, clientID, snap
func (_m *Controller) DeviceSnapRemove(orgID string, clientID string, snap string) error {
	ret := _m.Called(orgID, clientID, snap)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgID, clientID, snap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapServiceAction provides a mock function with given fields: orgID, clientID, snap, action, services
func (_m *Controller) DeviceSnapServiceAction(orgID string, clientID string, snap string, action string, services *messages.SnapService) error {
	ret := _m.Called(orgID, clientID, snap, action, services)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *messages.SnapService) error); ok {
		r0 = rf(orgID, clientID, snap, action, services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapSnapshot provides a mock function with given fields: orgID, clientID, snap, s3data
func (_m *Controller) DeviceSnapSnapshot(orgID string, clientID string, snap string, s3data *messages.SnapSnapshot) error {
	ret := _m.Called(orgID, clientID, snap, s3data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *messages.SnapSnapshot) error); ok {
		r0 = rf(orgID, clientID, snap, s3data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnapUpdate provides a mock function with given fields: orgID, clientID, snap, action, snapUpdate
func (_m *Controller) DeviceSnapUpdate(orgID string, clientID string, snap string, action string, snapUpdate *messages.SnapUpdate) error {
	ret := _m.Called(orgID, clientID, snap, action, snapUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *messages.SnapUpdate) error); ok {
		r0 = rf(orgID, clientID, snap, action, snapUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceSnaps provides a mock function with given fields: orgID, clientID
func (_m *Controller) DeviceSnaps(orgID string, clientID string) ([]messages.DeviceSnap, error) {
	ret := _m.Called(orgID, clientID)

	var r0 []messages.DeviceSnap
	if rf, ok := ret.Get(0).(func(string, string) []messages.DeviceSnap); ok {
		r0 = rf(orgID, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.DeviceSnap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupCreate provides a mock function with given fields: orgID, name
func (_m *Controller) GroupCreate(orgID string, name string) error {
	ret := _m.Called(orgID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupGet provides a mock function with given fields: orgID, name
func (_m *Controller) GroupGet(orgID string, name string) (domain.Group, error) {
	ret := _m.Called(orgID, name)

	var r0 domain.Group
	if rf, ok := ret.Get(0).(func(string, string) domain.Group); ok {
		r0 = rf(orgID, name)
	} else {
		r0 = ret.Get(0).(domain.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupGetDevices provides a mock function with given fields: orgID, name
func (_m *Controller) GroupGetDevices(orgID string, name string) ([]messages.Device, error) {
	ret := _m.Called(orgID, name)

	var r0 []messages.Device
	if rf, ok := ret.Get(0).(func(string, string) []messages.Device); ok {
		r0 = rf(orgID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupGetExcludedDevices provides a mock function with given fields: orgID, name
func (_m *Controller) GroupGetExcludedDevices(orgID string, name string) ([]messages.Device, error) {
	ret := _m.Called(orgID, name)

	var r0 []messages.Device
	if rf, ok := ret.Get(0).(func(string, string) []messages.Device); ok {
		r0 = rf(orgID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupLinkDevice provides a mock function with given fields: orgID, name, clientID
func (_m *Controller) GroupLinkDevice(orgID string, name string, clientID string) error {
	ret := _m.Called(orgID, name, clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgID, name, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupList provides a mock function with given fields: orgID
func (_m *Controller) GroupList(orgID string) ([]domain.Group, error) {
	ret := _m.Called(orgID)

	var r0 []domain.Group
	if rf, ok := ret.Get(0).(func(string) []domain.Group); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupUnlinkDevice provides a mock function with given fields: orgID, name, clientID
func (_m *Controller) GroupUnlinkDevice(orgID string, name string, clientID string) error {
	ret := _m.Called(orgID, name, clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgID, name, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealthHandler provides a mock function with given fields: client, msg
func (_m *Controller) HealthHandler(client mqtt.Client, msg mqtt.Message) {
	_m.Called(client, msg)
}

// User provides a mock function with given fields: orgID, clientID, user
func (_m *Controller) User(orgID string, clientID string, user messages.DeviceUser) error {
	ret := _m.Called(orgID, clientID, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, messages.DeviceUser) error); ok {
		r0 = rf(orgID, clientID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
