apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity
spec:
  selector:
    matchLabels:
      app: identity
      tier: frontend
      track: stable
  replicas: 1
  template:
    metadata:
      labels:
        app: identity
        tier: frontend
        track: stable
    spec:
      initContainers:
        - name: create-db
          image: jbergknoff/postgresql-client
          command: ["psql", "-d", "$(DATASOURCE)", "-f", "/sql/create-db.sql"]
          env:
            - name: DATASOURCE
              valueFrom:
                  configMapKeyRef:
                    name: ${POSTGRES_ADMIN_CONFIGMAP}
                    key: DATASOURCE
          volumeMounts:
          - name: sql
            mountPath: /sql
      containers:
        - name: identity
          image: ${IMAGE}
          imagePullPolicy: Always
          volumeMounts:
            - name: certs
              mountPath: /srv/certs
          env:
            - name: LOG_LEVEL
              value: '${LOG_LEVEL}'
            - name: LOG_FORMAT
              value: "json"
            - name: GIN_MODE
              value: "release"
            - name: IOTIDENTITY_SERVICE_PORT_INTERNAL
              value: "8030"
            - name: IOTIDENTITY_SERVICE_PORT_ENROLL
              value: "8031"
            - name: IOTIDENTITY_DATABASE_DRIVER
              value: "postgres"
            - name: IOTIDENTITY_DATABASE_CONNECTION_STRING
              valueFrom:
                configMapKeyRef:
                  name: postgres-config-identity
                  key: DATASOURCE
            - name: IOTIDENTITY_MQTT_HOST_ADDRESS
              value: "${MQTT_HOST_ADDRESS}"
            - name: IOTIDENTITY_MQTT_HOST_PORT
              value: "${MQTT_HOST_PORT}"
            - name: IOTIDENTITY_MQTT_CERTIFICATES_PATH
              value: "/srv/certs"
            - name: IOTIDENTITY_SERVICE_AUTH_PROVIDER
              value: "disabled"
          ports:
            - containerPort: 8030
            - containerPort: 8031
      volumes:
        - name: certs
          secret:
            secretName: identity-certs
        - name: sql
          configMap:
            name: postgres-config-identity
            items:
            - key: DB_CREATE_SQL
              path: create-db.sql
---
apiVersion: v1
kind: Service
metadata:
  name: identity
spec:
  selector:
    app: identity
    tier: frontend
  ports:
    - port: 8030
      protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: identity-version
data:
  version: '${IDENTITY_VERSION}'
---
