// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/everactive/dmscore/iot-identity/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/everactive/dmscore/iot-identity/service"
)

// Identity is an autogenerated mock type for the Identity type
type Identity struct {
	mock.Mock
}

// DeleteDevice provides a mock function with given fields: deviceID
func (_m *Identity) DeleteDevice(deviceID string) (string, error) {
	ret := _m.Called(deviceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(deviceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceGet provides a mock function with given fields: orgID, deviceID
func (_m *Identity) DeviceGet(orgID string, deviceID string) (*domain.Enrollment, error) {
	ret := _m.Called(orgID, deviceID)

	var r0 *domain.Enrollment
	if rf, ok := ret.Get(0).(func(string, string) *domain.Enrollment); ok {
		r0 = rf(orgID, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Enrollment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orgID, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceList provides a mock function with given fields: orgID
func (_m *Identity) DeviceList(orgID string) ([]domain.Enrollment, error) {
	ret := _m.Called(orgID)

	var r0 []domain.Enrollment
	if rf, ok := ret.Get(0).(func(string) []domain.Enrollment); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Enrollment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceUpdate provides a mock function with given fields: orgID, deviceID, req
func (_m *Identity) DeviceUpdate(orgID string, deviceID string, req *service.DeviceUpdateRequest) error {
	ret := _m.Called(orgID, deviceID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *service.DeviceUpdateRequest) error); ok {
		r0 = rf(orgID, deviceID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnrollDevice provides a mock function with given fields: req
func (_m *Identity) EnrollDevice(req *service.EnrollDeviceRequest) (*domain.Enrollment, error) {
	ret := _m.Called(req)

	var r0 *domain.Enrollment
	if rf, ok := ret.Get(0).(func(*service.EnrollDeviceRequest) *domain.Enrollment); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Enrollment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*service.EnrollDeviceRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganizationList provides a mock function with given fields:
func (_m *Identity) OrganizationList() ([]domain.Organization, error) {
	ret := _m.Called()

	var r0 []domain.Organization
	if rf, ok := ret.Get(0).(func() []domain.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevice provides a mock function with given fields: req
func (_m *Identity) RegisterDevice(req *service.RegisterDeviceRequest) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(*service.RegisterDeviceRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*service.RegisterDeviceRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterOrganization provides a mock function with given fields: req
func (_m *Identity) RegisterOrganization(req *service.RegisterOrganizationRequest) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(*service.RegisterOrganizationRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*service.RegisterOrganizationRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIdentity interface {
	mock.TestingT
	Cleanup(func())
}

// NewIdentity creates a new instance of Identity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIdentity(t mockConstructorTestingTNewIdentity) *Identity {
	mock := &Identity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
